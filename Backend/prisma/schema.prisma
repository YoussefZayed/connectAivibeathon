generator client {
  provider = "prisma-client-js"
}

generator kysely {
  provider = "npx prisma-kysely"
  output   = "src/generated"
  fileName = "types.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id                   Int                    @id @default(autoincrement())
  createdAt            DateTime               @default(now())
  username             String                 @unique
  password             String
  // Social media profile URLs
  linkedin_url         String?
  facebook_url         String?
  instagram_url        String?
  twitter_url          String?
  youtube_url          String?
  tiktok_url           String?
  // Scraped social media data stored as JSONB
  social_media_data    Json? // This will be typed as any in the generated types
  // Last scraping timestamp
  last_scraped_at      DateTime?
  profile              user_profile?
  facebook_profile     facebook_profile?
  instagram_profile    instagram_profile?
  knowledge_base_entry knowledge_base_entry[]
  linkedin_posts       linkedin_posts[]
  linkedin_profile     linkedin_profile?
  tiktok_profile       tiktok_profile?
  twitter_profile      twitter_profile?
  youtube_profile      youtube_profile?
}

model user_profile {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user_id     Int      @unique
  full_name   String
  industry    String?
  hobbies     String?
  looking_for String?
  bio         String?
  user        user     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model health {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
}

// connect users
model user_contacts {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  user_id    Int
  contact_id Int
}

model eventsData {
  id                Int      @id @default(autoincrement())
  createdAt         DateTime @default(now())
  event_name        String
  event_description String
  event_date        DateTime
  image_url         String
}

model facebook_profile {
  id              Int       @id @default(autoincrement())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime
  user_id         Int       @unique
  profile_data    Json?
  last_scraped    DateTime?
  scraping_status String    @default("pending")
  scraping_error  String?
  user            user      @relation(fields: [user_id], references: [id])
}

model instagram_profile {
  id              Int       @id @default(autoincrement())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime
  user_id         Int       @unique
  profile_data    Json?
  last_scraped    DateTime?
  scraping_status String    @default("pending")
  scraping_error  String?
  user            user      @relation(fields: [user_id], references: [id])
}

model knowledge_base_entry {
  id               Int      @id @default(autoincrement())
  createdAt        DateTime @default(now())
  updatedAt        DateTime
  user_id          Int
  title            String
  content          String
  source_platform  String
  source_type      String
  source_id        String?
  source_url       String?
  summary          String?
  keywords         Json?
  sentiment        String?
  topics           Json?
  confidence_score Float?
  is_processed     Boolean  @default(false)
  processing_error String?
  user             user     @relation(fields: [user_id], references: [id])
}

model linkedin_posts {
  id                   Int       @id @default(autoincrement())
  createdAt            DateTime  @default(now())
  user_id              Int
  post_id              String    @unique
  url                  String
  post_type            String?
  date_posted          DateTime?
  title                String?
  post_text            String?
  hashtags             Json?
  embedded_links       Json?
  images               Json?
  videos               Json?
  video_duration       Int?
  num_likes            Int?
  num_comments         Int?
  top_visible_comments Json?
  tagged_companies     Json?
  tagged_people        Json?
  last_scraped         DateTime?
  scraping_status      String    @default("pending")
  scraping_error       String?
  user                 user      @relation(fields: [user_id], references: [id])
}

model linkedin_profile {
  id                   Int       @id @default(autoincrement())
  createdAt            DateTime  @default(now())
  updatedAt            DateTime
  user_id              Int       @unique
  linkedin_id          String?
  linkedin_num_id      String?
  url                  String
  name                 String?
  first_name           String?
  last_name            String?
  country_code         String?
  city                 String?
  about                String?
  followers            Int?
  connections          Int?
  position             String?
  current_company_name String?
  avatar               String?
  banner_image         String?
  experience           Json?
  education            Json?
  certifications       Json?
  activity             Json?
  posts                Json?
  last_scraped         DateTime?
  scraping_status      String    @default("pending")
  scraping_error       String?
  user                 user      @relation(fields: [user_id], references: [id])
}

model tiktok_profile {
  id              Int       @id @default(autoincrement())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime
  user_id         Int       @unique
  profile_data    Json?
  last_scraped    DateTime?
  scraping_status String    @default("pending")
  scraping_error  String?
  user            user      @relation(fields: [user_id], references: [id])
}

model twitter_profile {
  id              Int       @id @default(autoincrement())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime
  user_id         Int       @unique
  profile_data    Json?
  last_scraped    DateTime?
  scraping_status String    @default("pending")
  scraping_error  String?
  user            user      @relation(fields: [user_id], references: [id])
}

model youtube_profile {
  id              Int       @id @default(autoincrement())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime
  user_id         Int       @unique
  profile_data    Json?
  last_scraped    DateTime?
  scraping_status String    @default("pending")
  scraping_error  String?
  user            user      @relation(fields: [user_id], references: [id])
}
